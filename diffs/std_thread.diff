30,33c30,31
< #ifndef _GLIBCXX_THREAD_H
< #define _GLIBCXX_THREAD_H 1
< 
< #pragma GCC system_header
---
> #ifndef CXX20_CONCURRENCY_THREAD_H
> #define CXX20_CONCURRENCY_THREAD_H 1
36a35
> #include <bits/c++20-concurrency/global.h>
53c52,55
< namespace std _GLIBCXX_VISIBILITY(default)
---
> namespace std CXX20_CONCURRENCY_VISIBILITY_ATTRIBUTE
> {
>     
> inline namespace CXX20_CONCURRENCY_NAMESPACE
55,59d56
< _GLIBCXX_BEGIN_NAMESPACE_VERSION
< 
<   /** @addtogroup threads
<    *  @{
<    */
62c59
<   class thread
---
>   class CXX20_CONCURRENCY_DECORATE_NAME(thread)
105,225d101
< 
<       template<class _CharT, class _Traits>
< 	friend basic_ostream<_CharT, _Traits>&
< 	operator<<(basic_ostream<_CharT, _Traits>& __out, id __id);
<     };
< 
<   private:
<     id				_M_id;
< 
<     // _GLIBCXX_RESOLVE_LIB_DEFECTS
<     // 2097.  packaged_task constructors should be constrained
<     // 3039. Unnecessary decay in thread and packaged_task
<     template<typename _Tp>
<       using __not_same = __not_<is_same<__remove_cvref_t<_Tp>, thread>>;
< 
<   public:
<     thread() noexcept = default;
< 
< #ifdef _GLIBCXX_HAS_GTHREADS
<     template<typename _Callable, typename... _Args,
< 	     typename = _Require<__not_same<_Callable>>>
<       explicit
<       thread(_Callable&& __f, _Args&&... __args)
<       {
< 	static_assert( __is_invocable<typename decay<_Callable>::type,
< 				      typename decay<_Args>::type...>::value,
< 	  "std::thread arguments must be invocable after conversion to rvalues"
< 	  );
< 
< #ifdef GTHR_ACTIVE_PROXY
< 	// Create a reference to pthread_create, not just the gthr weak symbol.
< 	auto __depend = reinterpret_cast<void(*)()>(&pthread_create);
< #else
< 	auto __depend = nullptr;
< #endif
< 	using _Wrapper = _Call_wrapper<_Callable, _Args...>;
< 	// Create a call wrapper with DECAY_COPY(__f) as its target object
< 	// and DECAY_COPY(__args)... as its bound argument entities.
< 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
< 	      std::forward<_Callable>(__f), std::forward<_Args>(__args)...)),
< 	    __depend);
<       }
< #endif // _GLIBCXX_HAS_GTHREADS
< 
<     ~thread()
<     {
<       if (joinable())
< 	std::terminate();
<     }
< 
<     thread(const thread&) = delete;
< 
<     thread(thread&& __t) noexcept
<     { swap(__t); }
< 
<     thread& operator=(const thread&) = delete;
< 
<     thread& operator=(thread&& __t) noexcept
<     {
<       if (joinable())
< 	std::terminate();
<       swap(__t);
<       return *this;
<     }
< 
<     void
<     swap(thread& __t) noexcept
<     { std::swap(_M_id, __t._M_id); }
< 
<     bool
<     joinable() const noexcept
<     { return !(_M_id == id()); }
< 
<     void
<     join();
< 
<     void
<     detach();
< 
<     id
<     get_id() const noexcept
<     { return _M_id; }
< 
<     /** @pre thread is joinable
<      */
<     native_handle_type
<     native_handle()
<     { return _M_id._M_thread; }
< 
<     // Returns a value that hints at the number of hardware thread contexts.
<     static unsigned int
<     hardware_concurrency() noexcept;
< 
< #ifdef _GLIBCXX_HAS_GTHREADS
<   private:
<     template<typename _Callable>
<       struct _State_impl : public _State
<       {
< 	_Callable		_M_func;
< 
< 	template<typename... _Args>
< 	  _State_impl(_Args&&... __args)
< 	  : _M_func{{std::forward<_Args>(__args)...}}
< 	  { }
< 
< 	void
< 	_M_run() { _M_func(); }
<       };
< 
<     void
<     _M_start_thread(_State_ptr, void (*)());
< 
< #if _GLIBCXX_THREAD_ABI_COMPAT
<   public:
<     struct _Impl_base;
<     typedef shared_ptr<_Impl_base>	__shared_base_type;
<     struct _Impl_base
<     {
<       __shared_base_type	_M_this_ptr;
<       virtual ~_Impl_base() = default;
<       virtual void _M_run() = 0;
227,267d102
< 
<   private:
<     void
<     _M_start_thread(__shared_base_type, void (*)());
< 
<     void
<     _M_start_thread(__shared_base_type);
< #endif
< 
<   private:
<     // A call wrapper that does INVOKE(forwarded tuple elements...)
<     template<typename _Tuple>
<       struct _Invoker
<       {
< 	_Tuple _M_t;
< 
< 	template<typename>
< 	  struct __result;
< 	template<typename _Fn, typename... _Args>
< 	  struct __result<tuple<_Fn, _Args...>>
< 	  : __invoke_result<_Fn, _Args...>
< 	  { };
< 
< 	template<size_t... _Ind>
< 	  typename __result<_Tuple>::type
< 	  _M_invoke(_Index_tuple<_Ind...>)
< 	  { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }
< 
< 	typename __result<_Tuple>::type
< 	operator()()
< 	{
< 	  using _Indices
< 	    = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;
< 	  return _M_invoke(_Indices());
< 	}
<       };
< 
<   public:
<     template<typename... _Tp>
<       using _Call_wrapper = _Invoker<tuple<typename decay<_Tp>::type...>>;
< #endif // _GLIBCXX_HAS_GTHREADS
270,279d104
< #ifndef _GLIBCXX_HAS_GTHREADS
<   inline void thread::join() { std::__throw_system_error(EINVAL); }
<   inline void thread::detach() { std::__throw_system_error(EINVAL); }
<   inline unsigned int thread::hardware_concurrency() noexcept { return 0; }
< #endif
< 
<   inline void
<   swap(thread& __x, thread& __y) noexcept
<   { __x.swap(__y); }
< 
281c106
<   operator==(thread::id __x, thread::id __y) noexcept
---
>   operator==(CXX20_CONCURRENCY_DECORATE_NAME(thread)::id __x, CXX20_CONCURRENCY_DECORATE_NAME(thread)::id __y) noexcept
289a115,116
> } // namespace CXX20_CONCURRENCY_NAMESPACE
> 
295,296c122,123
<     struct hash<thread::id>
<     : public __hash_base<size_t, thread::id>
---
>     struct hash<CXX20_CONCURRENCY_DECORATE_NAME(thread)::id>
>     : public __hash_base<size_t, CXX20_CONCURRENCY_DECORATE_NAME(thread)::id>
299c126
<       operator()(const thread::id& __id) const noexcept
---
>       operator()(const CXX20_CONCURRENCY_DECORATE_NAME(thread)::id& __id) const noexcept
303c130,133
<   namespace this_thread
---
> inline namespace CXX20_CONCURRENCY_NAMESPACE
> {
> 
>   namespace CXX20_CONCURRENCY_DECORATE_NAME(this_thread)
306c136
<     inline thread::id
---
>     inline CXX20_CONCURRENCY_DECORATE_NAME(thread)::id
310c140
<       return thread::id(1);
---
>       return CXX20_CONCURRENCY_DECORATE_NAME(thread)::id(1);
312c142
<       return thread::id(_GLIBCXX_NATIVE_THREAD_ID);
---
>       return CXX20_CONCURRENCY_DECORATE_NAME(thread)::id(_GLIBCXX_NATIVE_THREAD_ID);
314c144
<       return thread::id(__gthread_self());
---
>       return CXX20_CONCURRENCY_DECORATE_NAME(thread)::id(__gthread_self());
331c161
< _GLIBCXX_END_NAMESPACE_VERSION
---
> } // namespace CXX20_CONCURRENCY_NAMESPACE
335c165
< #endif // _GLIBCXX_THREAD_H
---
> #endif // CXX20_CONCURRENCY_THREAD_H
